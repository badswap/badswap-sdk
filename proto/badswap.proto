syntax = "proto3";
package badswap;

message ERC20Transfer {
  bytes token = 1;
  bytes amount = 2;
}

message ERC721Transfer {
  bytes token = 1;
  bytes token_id = 2;
}

message ERC1155Transfer {
  bytes token = 1;
  bytes token_id = 2;
  bytes amount = 3;
}

message CryptoTransfer {
  oneof transfer {
    ERC20Transfer erc20 = 1;
    ERC721Transfer erc721 = 2;
    ERC1155Transfer erc1155 = 3;
  }
  uint32 chain_id = 4;
}

message FiatTransfer {
  enum PAYMENT_BACKEND {
    INVALID = 0;
    CASHAPP = 1;
    ZELLE = 2;
    BOFA = 3;
  }
  PAYMENT_BACKEND backend = 1;
  bytes amount = 2;
}

message Transfer {
  oneof data {
    CryptoTransfer crypto = 1;
    FiatTransfer fiat = 2;
  }
}

message FiatOffer {
  FiatTransfer offer = 1;
  bytes price = 2;
}

message Offer {
  Transfer gives = 1;
  Transfer gets = 2;
}

message OfferList {
  repeated Offer offers = 1;
}

message UserData {
  string bio = 1;
  bytes image = 2;
  OfferList offers = 3;
}

message NameQuery {
  oneof data {
    bytes multiaddr = 1;
    string name = 2;
  }
}

message NameQueryResponse {
  enum NameQueryResponseStatus {
    NAMEREG_QUERY_ERR = 0;
    NAMEREG_QUERY_OK = 1;
  }
  NameQueryResponseStatus status = 1;
  string result = 2;
}


message NameRegisterResponse {
  enum NameRegisterResponseStatus {
    NAMEREG_OK = 0;
    NAMEREG_NO = 1;
    NAMEREG_ERR = 2;
  }
  NameRegisterResponseStatus status = 1;
}

message Permit1Data {
  bytes v = 1;
  bytes r = 2;
  bytes s = 3;
  bytes expiry = 4;
}

message Permit2Data {
  bytes nonce = 1;
  bytes deadline = 2;
  bytes signature = 3;
}

message PermitData {
  oneof data {
    Permit1Data permit1_data = 1;
    Permit2Data permit2_data = 2;
  }e
}

message TradeRequest {
  Offer offer = 1;
  bytes address = 2;
  bytes nonce = 3;
}

message Error
  enum CODE {
    INVALID = 0;
    UNEXPECTED = 1;
    INSUFFICIENT_BALANCE = 2;
  }
  CODE code = 1;
}

message CheckTradeResponse {
  oneof result {
    bytes volume = 1;
    Error error = 2;
  }
}

message CreateTradeSuccess {
  bytes taker = 1;
  bytes maker = 2;
  bytes nonce = 3;
  Offer offer = 4;
  bytes amount = 5;
}
  
message CreateTradeResponse {
  oneof result {
    CreateTradeSuccess fill = 1;
    Error error = 2;
  }
}


